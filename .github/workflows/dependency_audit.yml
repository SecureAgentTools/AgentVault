name: Security Dependency Audit

# Trigger on pushes and pull requests to the main branch
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Optional: Allow manual trigger from Actions tab
  workflow_dispatch:

jobs:
  pip-audit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component:
          - agentvault_library
          - agentvault_cli
          - agentvault_registry
          - agentvault_server_sdk
          # Add agentvault_testing_utils if it has dependencies to audit
          # - agentvault_testing_utils
    name: Audit ${{ matrix.component }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true # Keep venv inside component dir

      - name: Install pip-audit tool
        run: pipx install pip-audit # Install tool globally for runner

      - name: Load cached venv for ${{ matrix.component }}
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: ${{ matrix.component }}/.venv
          # Cache key depends on the lock file hash
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ matrix.component }}-${{ hashFiles(format('{0}/poetry.lock', matrix.component)) }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ matrix.component }}-

      # --- CORRECTED: Run 'poetry lock' without '--no-update' ---
      # This ensures the lock file is consistent with pyproject.toml and path dependencies
      - name: Update lock file for ${{ matrix.component }}
        run: poetry lock
        working-directory: ${{ matrix.component }}
      # --- END CORRECTION ---

      # --- Use 'poetry install --sync' as recommended ---
      # This ensures the environment matches the (potentially updated) lock file exactly.
      - name: Synchronize dependencies for ${{ matrix.component }}
        run: |
          echo "Attempting to sync environment with lock file using 'poetry install --sync'..."
          # Using install --sync as 'poetry sync' is newer and might have subtle differences
          poetry install --sync --no-root --no-interaction
        working-directory: ${{ matrix.component }}

      - name: Run pip-audit for ${{ matrix.component }}
        run: |
          echo "Running pip-audit on installed packages in ${{ matrix.component }}'s venv..."
          # Use 'poetry run' to execute pip-audit within the correct venv
          poetry run pip-audit --progress-spinner=off --strict
        working-directory: ${{ matrix.component }} # Run from component dir
