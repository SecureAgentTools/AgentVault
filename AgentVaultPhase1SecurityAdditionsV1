Based on your confirmation, here is the implementation plan specifically for the agreed-upon **Enhanced Security & Trust** items. This plan breaks down the suggestions into actionable steps and proposes new Requirement IDs (`REQ-`) where appropriate.

---

**Implementation Plan: Enhanced Security & Trust (Phase 1 Additions)**

**Overall Goal:** Integrate foundational security practices and enhance user trust by addressing dependency management, vulnerability disclosure, API protection, and user awareness.

**1. Dependency Security Management**

*   **REQ-SEC-DEP-001: Integrate Automated Dependency Scanning**
    *   **Component:** CI/CD (Affects all components indirectly)
    *   **Action:** Add a step to the project's CI/CD pipeline (e.g., GitHub Actions workflow) to scan dependencies for known vulnerabilities.
    *   **Implementation Details:**
        *   Choose a tool: `pip-audit` is a good, straightforward option. `Dependabot` (via GitHub settings) is also excellent for automated checks and PRs.
        *   Add a job/step in the CI workflow (e.g., `.github/workflows/ci.yml`) that runs `pip-audit` against the `poetry.lock` files of each component (`agentvault_library`, `agentvault_registry`, `agentvault_cli`).
        *   Configure the CI step to fail if high or critical severity vulnerabilities are found.
    *   **Tools:** `pip-audit`, CI/CD platform (e.g., GitHub Actions).

*   **REQ-SEC-DEP-002: Document Dependency Update Policy**
    *   **Component:** Documentation (Project Root)
    *   **Action:** Add a section to `CONTRIBUTING.md` (or create a dedicated `SECURITY_POLICY.md` if preferred) outlining the policy for handling vulnerable dependencies.
    *   **Implementation Details:**
        *   State the commitment to regularly scan dependencies (linking to REQ-SEC-DEP-001).
        *   Define the process for addressing found vulnerabilities (e.g., prioritize critical/high, attempt update, assess risk if no patch available, document exceptions).
        *   Clarify expectations for contributors regarding dependency updates in PRs.
    *   **Files:** `CONTRIBUTING.md` (or new `SECURITY_POLICY.md`)

**2. Vulnerability Disclosure Policy**

*   **REQ-SEC-DISC-001: Create SECURITY.md File**
    *   **Component:** Project Root
    *   **Action:** Create a `SECURITY.md` file in the root directory.
    *   **Implementation Details:**
        *   **Content:**
            *   **Introduction:** State the project's commitment to security.
            *   **Scope:** Define which components/repositories are covered by this policy.
            *   **Reporting:** Provide clear instructions on how to report a vulnerability *privately*. Options:
                *   Dedicated email address (e.g., `security@agentvault.example.com` - **replace domain**). State that this is for vulnerability reports *only*.
                *   Enable and link to GitHub's Private Vulnerability Reporting feature for the repository. (Recommended if using GitHub).
            *   **What to Include:** Request details like component, version, description, steps to reproduce, potential impact.
            *   **Response:** Set expectations for acknowledgment (e.g., within 48 hours) and updates.
            *   **Disclosure:** Briefly mention the plan for public disclosure after a fix is available (e.g., via release notes, security advisories).
            *   **Safe Harbor:** Include a statement that you will not take legal action against reporters who act in good faith and follow the policy.
    *   **Files:** `SECURITY.md`

**3. Registry API Protection**

*   **REQ-REG-SEC-001: Implement Rate Limiting**
    *   **Component:** `agentvault-registry`
    *   **Action:** Add rate limiting middleware to the FastAPI application.
    *   **Implementation Details:**
        *   Add `slowapi` to `agentvault_registry/pyproject.toml` dependencies.
        *   In `agentvault_registry/main.py`:
            *   Import necessary components from `slowapi` and `slowapi.errors`.
            *   Configure a default limiter (e.g., based on IP address using `Limiter(key_func=get_remote_address)`).
            *   Apply the limiter as middleware to the FastAPI app (`app.state.limiter = limiter`, `app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)`, `app.add_middleware(SlowAPIMiddleware)`).
            *   Consider applying stricter limits to authenticated endpoints (POST/PUT/DELETE on `/agent-cards`) potentially using a different key function (e.g., based on the authenticated developer ID) or route-specific decorators (`@limiter.limit(...)`). Public GET endpoints should have more lenient limits.
    *   **Files:** `agentvault_registry/pyproject.toml`, `agentvault_registry/src/agentvault_registry/main.py`
    *   **Dependencies:** `slowapi`

*   **REQ-REG-SEC-002: Enhance Query Parameter Validation**
    *   **Component:** `agentvault-registry`
    *   **Action:** Add stricter validation for API query parameters, especially free-text search.
    *   **Implementation Details:**
        *   In `agentvault_registry/routers/agent_cards.py`, modify the `list_agent_cards` endpoint signature.
        *   For the `search: Optional[str] = Query(...)` parameter, add a `max_length` constraint (e.g., `max_length=100`) to prevent overly long search terms potentially impacting database performance.
        *   Review `skip` and `limit` validation (already using `ge`, `le`) - ensure limits are reasonable.
    *   **Files:** `agentvault_registry/src/agentvault_registry/routers/agent_cards.py`

**4. Key Lookup Redesign (Deferred)**

*   **REQ-REG-SEC-KEYLOOKUP (Phase 2): Redesign Developer API Key Lookup**
    *   **Component:** `agentvault-registry`
    *   **Action:** Defer implementation to Phase 2.
    *   **Implementation Details (Future):** Replace the iterative hash verification in `crud.developer.get_developer_by_plain_api_key` with either the Key Prefix or Separate Key Table approach outlined previously. This will involve database schema changes (new column or table), migration updates, and modifications to `crud.developer` and `security.py`.

**5. User Warnings & Documentation**

*   **REQ-DOC-SEC-001: Enhance README Security Section**
    *   **Component:** Project Root (`README.md`)
    *   **Action:** Revise and expand the "Security Model" section in the main project `README.md`.
    *   **Implementation Details:**
        *   Make the section more prominent (e.g., use headings, bold text).
        *   Add a dedicated subsection titled "Trusting Remote Agents".
        *   Explicitly state that interacting with a remote agent involves trusting its operator.
        *   Reinforce that AgentVault *does not* vet agent behavior.
        *   Emphasize checking the Agent Card for provider info, privacy policies, etc.
        *   Reiterate advice on minimizing sensitive data sent to unknown agents.
*   **REQ-CLI-SEC-001: Add CLI Warning for New Agents (Optional - Phase 1.5)**
    *   **Component:** `agentvault-cli`
    *   **Action:** (Potentially defer slightly due to added state management complexity) Implement a mechanism in the `run` command to warn the user the first time they interact with a specific agent ID.
    *   **Implementation Details:**
        *   **State Storage:** Choose a simple method to store IDs of previously run agents (e.g., a plain text file in `~/.config/agentvault/known_agents.txt` or a small local SQLite DB).
        *   **Logic in `run` command:** Before initiating the task, load the known agent IDs. Check if the target `agent_ref` (specifically the ID part if resolved from registry/card) is in the known list.
        *   **Warning & Confirmation:** If the ID is *not* known:
            *   Display a clear warning message (using `utils.display_warning`) explaining the trust implications of running an unknown agent.
            *   Require explicit confirmation to proceed. This could be via:
                *   An interactive prompt (`click.confirm(...)`).
                *   A mandatory `--yes` or `--force-run-unknown` flag for non-interactive use.
            *   If confirmed, add the agent ID to the known list and proceed.
            *   If not confirmed, exit gracefully.
    *   **Files:** `agentvault_cli/src/agentvault_cli/commands/run.py`, potentially a new utility file for managing the known agents list.

---

This plan outlines the steps for implementing the agreed-upon security enhancements. We can proceed with generating code for specific `REQ-` items based on this plan.