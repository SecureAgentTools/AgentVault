{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AgentVault","text":"<p>AgentVault is an open-source ecosystem designed to facilitate secure and interoperable communication between AI agents (Agent-to-Agent or A2A).</p> <p>This documentation provides guides for users and developers interacting with or building upon the AgentVault components.</p>"},{"location":"#key-goals","title":"Key Goals","text":"<ul> <li>Interoperability: Define standard protocols (A2A, MCP) for agents to communicate effectively.</li> <li>Security: Provide mechanisms for secure key management and potentially leverage Trusted Execution Environments (TEEs).</li> <li>Discovery: Enable users and agents to find other agents via a central registry.</li> <li>Developer Experience: Offer SDKs and tools to simplify the development of A2A-compliant agents.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>(Coming Soon) Installation Guide</li> <li>(Coming Soon) User Guide (CLI)</li> <li>(Coming Soon) Developer Guides (Library, Server SDK, Registry, Testing)</li> </ul> <p>(This documentation is under active development alongside the AgentVault project.)</p>"},{"location":"a2a_profile_v0.2/","title":"AgentVault A2A Profile v0.2","text":"<p>This document specifies the Agent-to-Agent (A2A) communication profile implemented by AgentVault components (as of v0.2.x of the libraries/SDK). It defines how clients interact with A2A-compliant agent servers.</p>"},{"location":"a2a_profile_v0.2/#overview","title":"Overview","text":"<ul> <li>Protocol: JSON-RPC 2.0</li> <li>Transport: HTTP/1.1 or HTTP/2 (HTTPS REQUIRED for non-localhost communication)</li> <li>Request Method: Primarily <code>POST</code> for all JSON-RPC requests, including <code>tasks/sendSubscribe</code>.</li> <li>Streaming: Server-Sent Events (SSE) for real-time updates (<code>tasks/sendSubscribe</code>).</li> <li>Data Format: JSON</li> </ul>"},{"location":"a2a_profile_v0.2/#transport","title":"Transport","text":"<p>All JSON-RPC requests are sent using the HTTP <code>POST</code> method to the agent's A2A endpoint URL specified in its Agent Card (<code>url</code> field).</p> <p>Responses to standard JSON-RPC requests are returned in the HTTP response body.</p> <p>For streaming updates via <code>tasks/sendSubscribe</code>, the server responds with HTTP <code>200 OK</code> and a <code>Content-Type: text/event-stream</code> header, followed by the SSE stream in the response body.</p> <p>HTTPS is mandatory for all communication except potentially during local development targeting <code>localhost</code>.</p>"},{"location":"a2a_profile_v0.2/#authentication","title":"Authentication","text":"<p>Agents declare their supported authentication methods in their Agent Card (<code>authSchemes</code>). Clients MUST support at least one of the declared schemes. The <code>agentvault</code> library currently supports the following client-side implementations:</p> <ul> <li><code>none</code>: No authentication is performed. The client sends the request without any specific authentication headers.</li> <li><code>apiKey</code>:<ul> <li>The client retrieves the appropriate API key using the <code>KeyManager</code> (based on the <code>service_identifier</code> in the Agent Card or an override).</li> <li>The client includes the key in the <code>X-Api-Key</code> HTTP header.</li> <li>The server is responsible for validating this key.</li> </ul> </li> <li><code>oauth2</code> (Client Credentials Grant):<ul> <li>The Agent Card MUST provide a valid <code>tokenUrl</code> and optionally <code>scopes</code>.</li> <li>The client uses <code>KeyManager</code> to retrieve the <code>clientId</code> and <code>clientSecret</code> associated with the agent's <code>service_identifier</code>.</li> <li>The client makes a <code>POST</code> request to the <code>tokenUrl</code> with <code>grant_type=client_credentials</code>, <code>client_id</code>, <code>client_secret</code>, and optionally <code>scope</code>.</li> <li>The client extracts the <code>access_token</code> from the token endpoint's JSON response.</li> <li>The client includes the token in the <code>Authorization: Bearer &lt;access_token&gt;</code> HTTP header for subsequent requests to the agent's A2A endpoint.</li> <li>The client library performs basic in-memory caching of the obtained token based on its <code>expires_in</code> value (if provided).</li> <li>The agent server is responsible for validating the received Bearer token.</li> </ul> </li> </ul>"},{"location":"a2a_profile_v0.2/#json-rpc-methods","title":"JSON-RPC Methods","text":"<p>All methods follow the JSON-RPC 2.0 specification.</p>"},{"location":"a2a_profile_v0.2/#taskssend","title":"<code>tasks/send</code>","text":"<ul> <li>Purpose: Initiates a new task or sends a subsequent message to an existing task. Can optionally register a webhook for push notifications if the agent supports it.</li> <li>Params: <code>TaskSendParams</code> model<ul> <li><code>id</code> (Optional[str]): Task ID if continuing an existing task, <code>null</code> or omitted if initiating.</li> <li><code>message</code> (Message): The message object to send.</li> <li><code>webhookUrl</code> (Optional[str]): URL for the agent to send push notifications to (if supported by the agent).</li> <li>(Other fields like <code>sessionId</code>, <code>historyLength</code> might be added based on spec evolution)</li> </ul> </li> <li>Result: <code>TaskSendResult</code> model<ul> <li><code>id</code> (str): The ID of the task (newly created or existing).</li> </ul> </li> </ul>"},{"location":"a2a_profile_v0.2/#tasksget","title":"<code>tasks/get</code>","text":"<ul> <li>Purpose: Retrieve the current status, message history, and artifacts of a specific task.</li> <li>Params: <code>TaskGetParams</code> model (or simply <code>{\"id\": \"task-id\"}</code>)<ul> <li><code>id</code> (str): The ID of the task to retrieve.</li> <li>(Optional parameters like <code>historyLength</code> might be added)</li> </ul> </li> <li>Result: <code>Task</code> model - Contains the full task state (<code>id</code>, <code>state</code>, <code>createdAt</code>, <code>updatedAt</code>, <code>messages</code>, <code>artifacts</code>, <code>metadata</code>).</li> </ul>"},{"location":"a2a_profile_v0.2/#taskscancel","title":"<code>tasks/cancel</code>","text":"<ul> <li>Purpose: Request the cancellation of an ongoing task.</li> <li>Params: <code>TaskCancelParams</code> model (or simply <code>{\"id\": \"task-id\"}</code>)<ul> <li><code>id</code> (str): The ID of the task to cancel.</li> </ul> </li> <li>Result: <code>TaskCancelResult</code> model<ul> <li><code>success</code> (bool): Indicates if the cancellation request was accepted by the agent (doesn't guarantee immediate termination).</li> <li><code>message</code> (Optional[str]): Optional message from the agent regarding cancellation.</li> </ul> </li> </ul>"},{"location":"a2a_profile_v0.2/#taskssendsubscribe","title":"<code>tasks/sendSubscribe</code>","text":"<ul> <li>Purpose: Subscribe to real-time updates for a task via Server-Sent Events (SSE).</li> <li>Params: <code>TaskIdParams</code> model (or simply <code>{\"id\": \"task-id\"}</code>)<ul> <li><code>id</code> (str): The ID of the task to subscribe to.</li> </ul> </li> <li>Response:<ul> <li>Initial HTTP <code>200 OK</code> with <code>Content-Type: text/event-stream</code>.</li> <li>Followed by a stream of SSE messages in the response body (see SSE section below).</li> <li>The connection remains open until the task reaches a terminal state or is closed by either party.</li> </ul> </li> </ul>"},{"location":"a2a_profile_v0.2/#task-states-taskstate-enum","title":"Task States (<code>TaskState</code> Enum)","text":"<p>Defines the lifecycle of an A2A task:</p> <ul> <li><code>SUBMITTED</code>: Task received by the agent, awaiting execution.</li> <li><code>WORKING</code>: Task is actively being processed by the agent.</li> <li><code>INPUT_REQUIRED</code>: Task is paused, awaiting further input from the user/client (support for handling this state might vary).</li> <li><code>COMPLETED</code>: Task finished successfully. (Terminal State)</li> <li><code>FAILED</code>: Task terminated due to an error during execution. (Terminal State)</li> <li><code>CANCELED</code>: Task was canceled by user request before completion. (Terminal State)</li> </ul>"},{"location":"a2a_profile_v0.2/#server-sent-events-sse","title":"Server-Sent Events (SSE)","text":"<p>Used by the <code>tasks/sendSubscribe</code> method for streaming updates.</p> <ul> <li>Format: Standard SSE format. Each message consists of lines like <code>field: value</code>, followed by an empty line (<code>\\n\\n</code>).     <pre><code>event: &lt;event_type&gt;\ndata: &lt;json_payload&gt;\n\nevent: &lt;another_event_type&gt;\ndata: &lt;another_json_payload&gt;\n</code></pre></li> <li>Event Types (<code>event:</code> field):<ul> <li><code>task_status</code>: Indicates a change in the task's overall state.</li> <li><code>task_message</code>: Indicates a new message has been added to the task's history (usually from the agent or a tool).</li> <li><code>task_artifact</code>: Indicates a new artifact has been created or updated for the task.</li> <li><code>error</code>: Indicates an error occurred on the server side during streaming (distinct from JSON-RPC errors).</li> </ul> </li> <li>Data Payload (<code>data:</code> field): A JSON string representing the corresponding Pydantic model:<ul> <li><code>event: task_status</code> -&gt; <code>data: TaskStatusUpdateEvent</code> JSON</li> <li><code>event: task_message</code> -&gt; <code>data: TaskMessageEvent</code> JSON</li> <li><code>event: task_artifact</code> -&gt; <code>data: TaskArtifactUpdateEvent</code> JSON</li> <li><code>event: error</code> -&gt; <code>data: {\"error\": \"...\", \"message\": \"...\", ...}</code> JSON (structure may vary)</li> </ul> </li> </ul>"},{"location":"a2a_profile_v0.2/#json-rpc-errors","title":"JSON-RPC Errors","text":"<p>Standard JSON-RPC 2.0 error objects are returned within the JSON response body when a request cannot be fulfilled normally.</p> <ul> <li>Structure: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"error\": {\n    \"code\": &lt;integer&gt;,\n    \"message\": &lt;string&gt;,\n    \"data\": &lt;optional_any&gt;\n  },\n  \"id\": &lt;request_id_or_null&gt;\n}\n</code></pre></li> <li>Common Codes Used:<ul> <li><code>-32700</code>: Parse Error (Invalid JSON received).</li> <li><code>-32600</code>: Invalid Request (JSON is not a valid Request object).</li> <li><code>-32601</code>: Method Not Found.</li> <li><code>-32602</code>: Invalid Params (Invalid method parameters).</li> <li><code>-32603</code>: Internal Error (Server-side error not covered by others).</li> <li><code>-32000</code>: Generic Application Error (Used by SDK for agent logic errors).</li> <li><code>-32001</code>: Task Not Found (Custom application error).</li> <li>(Others may be defined)</li> </ul> </li> </ul>"},{"location":"architecture/","title":"AgentVault Architecture","text":"<p>This document provides a high-level overview of the AgentVault ecosystem architecture and the roles of its main components.</p>"},{"location":"architecture/#overall-vision","title":"Overall Vision","text":"<p>AgentVault aims to create a standardized and secure environment for AI agents to discover and interact with each other. It consists of core libraries, a central discovery service, development tools, and example implementations.</p> <pre><code>graph LR\n    subgraph Agent Developer Workflow\n        Dev[Developer] --&gt;|Uses SDK| SDK(agentvault_server_sdk)\n        SDK --&gt;|Builds| AgentServer(A2A Agent Server)\n        Dev --&gt;|Creates| Card(agent-card.json)\n        Dev --&gt;|Registers| Registry(AgentVault Registry API)\n        Registry --&gt;|Stores Info| DB[(Registry DB)]\n        Card --&gt;|Submitted to| Registry\n    end\n\n    subgraph User/Client Workflow\n        User[User/Client App] --&gt;|Uses CLI/Lib| CLI(agentvault_cli)\n        User --&gt;|Uses Lib| Lib(agentvault_library)\n        CLI --&gt;|Uses| Lib\n        Lib --&gt;|Discovers via| Registry\n        Lib --&gt;|Interacts with| AgentServer\n    end\n\n    subgraph Agent Interaction\n        AgentServer -- A2A Protocol --&gt; AgentServer\n        Lib -- A2A Protocol --&gt; AgentServer\n    end\n\n    style Dev fill:#f9f,stroke:#333,stroke-width:2px\n    style User fill:#ccf,stroke:#333,stroke-width:2px\n</code></pre>"},{"location":"architecture/#core-components","title":"Core Components","text":"<ul> <li> <p><code>agentvault_library</code> (Client Library):</p> <ul> <li>Provides the <code>AgentVaultClient</code> for initiating A2A communication (JSON-RPC/SSE).</li> <li>Includes the <code>KeyManager</code> for securely handling API keys and OAuth credentials from various sources (env, file, keyring).</li> <li>Defines Pydantic models for Agent Cards and A2A protocol messages/events.</li> <li>Contains utilities for parsing and validating Agent Cards.</li> <li>Used by both the <code>agentvault_cli</code> and potentially by end-user applications or other agents acting as clients.</li> </ul> </li> <li> <p><code>agentvault_cli</code> (Command Line Interface):</p> <ul> <li>User-facing tool for interacting with the ecosystem.</li> <li>Commands: <code>config</code> (manage keys), <code>discover</code> (query registry), <code>run</code> (execute tasks on agents).</li> <li>Relies heavily on <code>agentvault_library</code> for its core functionality.</li> </ul> </li> <li> <p><code>agentvault_registry</code> (Registry API &amp; UI):</p> <ul> <li>A central FastAPI application.</li> <li>Provides RESTful API endpoints (<code>/api/v1/</code>) for:<ul> <li>Agent Card submission (requires developer authentication).</li> <li>Agent Card listing, searching, and filtering (public).</li> <li>Agent Card retrieval by ID (public).</li> <li>Agent Card validation utility.</li> <li>(Future) Developer management.</li> </ul> </li> <li>Persists Agent Card and developer information in a PostgreSQL database (using SQLAlchemy and Alembic for migrations).</li> <li>Includes a basic web UI (<code>/ui</code>) for public discovery and a developer portal (<code>/ui/developer</code>) for card management.</li> <li>Handles developer authentication using API keys.</li> </ul> </li> <li> <p><code>agentvault_server_sdk</code> (Server SDK):</p> <ul> <li>A library to help developers build A2A-compliant agents.</li> <li>Provides <code>BaseA2AAgent</code> abstract class.</li> <li>Offers FastAPI integration (<code>create_a2a_router</code>) to automatically expose agent methods via the required JSON-RPC endpoint (<code>/a2a</code>).</li> <li>Includes abstractions for task state management (<code>BaseTaskStore</code>, <code>InMemoryTaskStore</code>).</li> <li>Provides utilities for packaging agents (Dockerfile generation via <code>agentvault-sdk</code> CLI tool).</li> </ul> </li> <li> <p><code>agentvault_testing_utils</code> (Testing Utilities):</p> <ul> <li>A shared library (not intended for end-users) containing mocks (<code>MockAgentVaultClient</code>), pytest fixtures (<code>mock_a2a_server</code>), factories (<code>create_test_agent_card</code>), and assertion helpers used across the other components' test suites.</li> </ul> </li> </ul>"},{"location":"architecture/#key-interactions","title":"Key Interactions","text":"<ol> <li>Agent Registration: A developer builds an agent (potentially using the SDK), creates an <code>agent-card.json</code>, and uses their developer API key to submit the card to the Registry API (<code>POST /api/v1/agent-cards/</code>).</li> <li>Agent Discovery: A user (via CLI) or client application (via Library) queries the Registry API (<code>GET /api/v1/agent-cards/</code>) to find agents based on search terms or capabilities (like TEE support).</li> <li>Task Execution: The client (CLI/Library) uses the <code>url</code> from the retrieved Agent Card to interact directly with the target A2A Agent Server endpoint (<code>/a2a</code>).<ul> <li>Authentication is handled based on the <code>authSchemes</code> in the Agent Card (API Key, OAuth, None).</li> <li>Communication follows the A2A JSON-RPC profile (methods like <code>tasks/send</code>, <code>tasks/get</code>, <code>tasks/sendSubscribe</code>).</li> <li>Streaming responses use Server-Sent Events (SSE).</li> </ul> </li> </ol>"},{"location":"concepts/","title":"Core Concepts","text":"<p>This page defines the key concepts within the AgentVault ecosystem.</p>"},{"location":"concepts/#agent-card","title":"Agent Card","text":"<ul> <li>Definition: A standardized JSON document (<code>agent-card.json</code>) containing metadata about an A2A agent.</li> <li>Purpose: Enables discovery and provides clients with the necessary information to interact with an agent (endpoint URL, capabilities, authentication methods, skills, etc.).</li> <li>Schema: Defined by the AgentVault project (see A2A Profile v0.2).</li> <li>Key Fields: <code>humanReadableId</code>, <code>name</code>, <code>description</code>, <code>url</code>, <code>capabilities</code>, <code>authSchemes</code>, <code>provider</code>.</li> </ul>"},{"location":"concepts/#agent-to-agent-a2a-protocol","title":"Agent-to-Agent (A2A) Protocol","text":"<ul> <li>Definition: The communication protocol used for direct interaction between an AgentVault client (or another agent) and an A2A-compliant agent server.</li> <li>Based On: Aligned with concepts from the Google A2A Protocol specification (using JSON-RPC 2.0 over HTTP POST, Server-Sent Events for streaming).</li> <li>Key Methods: <code>tasks/send</code>, <code>tasks/get</code>, <code>tasks/cancel</code>, <code>tasks/sendSubscribe</code>.</li> <li>Profile: See the AgentVault A2A Profile v0.2 for specific implementation details.</li> </ul>"},{"location":"concepts/#model-context-protocol-mcp","title":"Model Context Protocol (MCP)","text":"<ul> <li>Definition: (Conceptual) A protocol designed for exchanging richer contextual information between agents, potentially including complex data structures, file references, and standardized metadata.</li> <li>Status: Currently in the conceptual phase within AgentVault. Basic utilities exist for embedding context data within A2A message metadata.</li> <li>Goal: To enable more sophisticated multi-agent collaboration beyond simple request/response.</li> </ul>"},{"location":"concepts/#agentvault-registry","title":"AgentVault Registry","text":"<ul> <li>Definition: A central API service where developers can register their agents (by submitting Agent Cards) and users/clients can discover agents.</li> <li>Component: <code>agentvault_registry</code></li> <li>Features: Agent listing, search, detail retrieval, agent card validation, developer verification (planned). Includes a basic web UI.</li> </ul>"},{"location":"concepts/#agentvault-library-client","title":"AgentVault Library (Client)","text":"<ul> <li>Definition: The core Python library (<code>agentvault</code>) providing client-side functionality.</li> <li>Component: <code>agentvault_library</code></li> <li>Features: <code>AgentVaultClient</code> for making A2A calls (JSON-RPC, SSE), <code>KeyManager</code> for secure credential handling, Agent Card parsing/validation utilities, Pydantic models for A2A/Agent Card structures.</li> </ul>"},{"location":"concepts/#agentvault-server-sdk","title":"AgentVault Server SDK","text":"<ul> <li>Definition: A Python SDK (<code>agentvault-server-sdk</code>) designed to simplify the process of building A2A-compliant agent servers.</li> <li>Component: <code>agentvault_server_sdk</code></li> <li>Features: <code>BaseA2AAgent</code> class, FastAPI integration helpers (<code>create_a2a_router</code>), task state management abstractions, packaging utilities (<code>agentvault-sdk</code> CLI tool).</li> </ul>"},{"location":"concepts/#trusted-execution-environment-tee","title":"Trusted Execution Environment (TEE)","text":"<ul> <li>Definition: A secure area within a processor, providing confidentiality and integrity guarantees for code and data running inside it.</li> <li>Relevance: Agents can optionally declare TEE usage in their Agent Card (<code>capabilities.teeDetails</code>) to signal enhanced security postures. Clients can potentially verify TEE attestations.</li> <li>Profile: See the AgentVault TEE Profile (placeholder link).</li> </ul>"},{"location":"security/","title":"AgentVault Security Considerations","text":"<p>Security is a core principle of the AgentVault project. This document outlines the current security features and considerations.</p>"},{"location":"security/#authentication","title":"Authentication","text":"<p>How clients prove their identity to agents, and how developers prove their identity to the registry.</p>"},{"location":"security/#agent-authentication-client-agent","title":"Agent Authentication (Client -&gt; Agent)","text":"<p>Agents declare their supported authentication methods in their <code>AgentCard</code> via the <code>authSchemes</code> field. The client (<code>agentvault_library</code>) currently supports:</p> <ul> <li><code>apiKey</code>: The client sends a secret API key, typically in the <code>X-Api-Key</code> header. The <code>KeyManager</code> helps clients store and retrieve these keys securely. The agent server is responsible for validating this key against its own store.</li> <li><code>oauth2</code> (Client Credentials Grant): The client uses a pre-configured Client ID and Client Secret (managed via <code>KeyManager</code>) to obtain a Bearer token from the <code>tokenUrl</code> specified in the Agent Card. The client then sends this token in the <code>Authorization: Bearer &lt;token&gt;</code> header. The agent server is responsible for validating the Bearer token (e.g., via introspection or using JWT validation if applicable).</li> <li><code>none</code>: No authentication is required. Suitable for public, informational agents.</li> <li><code>bearer</code>: (Supported by model, client logic TBD) Assumes the client already possesses a Bearer token and sends it in the <code>Authorization</code> header. The mechanism for obtaining this token is outside the scope of the basic A2A interaction itself.</li> </ul>"},{"location":"security/#registry-authentication-developer-registry","title":"Registry Authentication (Developer -&gt; Registry)","text":"<ul> <li>API Key: The <code>agentvault_registry</code> uses a simple API key mechanism for developers managing their Agent Cards.<ul> <li>Keys are generated securely (<code>avreg_</code> prefix + <code>secrets.token_urlsafe</code>).</li> <li>Keys are hashed using <code>bcrypt</code> (<code>passlib</code>) before being stored in the database (<code>Developer.api_key_hash</code>).</li> <li>Incoming requests to protected registry endpoints (e.g., POST/PUT/DELETE on <code>/agent-cards/</code>) must include the plain text key in the <code>X-Api-Key</code> header.</li> <li>The registry verifies the provided key against the stored hash using <code>passlib.verify</code>.</li> <li>Note: This relies on iterating through developer hashes, which is not suitable for very large scale but acceptable for initial phases.</li> </ul> </li> </ul>"},{"location":"security/#key-management-client-side","title":"Key Management (Client-Side)","text":"<ul> <li>The <code>agentvault_library</code> provides the <code>KeyManager</code> class to abstract credential storage for clients.</li> <li>Sources: It loads API keys and OAuth credentials from:<ol> <li>Key Files (<code>.env</code> or <code>.json</code>) - Highest priority.</li> <li>Environment Variables (<code>AGENTVAULT_KEY_*</code>, <code>AGENTVAULT_OAUTH_*</code>).</li> <li>OS Keyring (optional, requires <code>keyring</code> package and backend).</li> </ol> </li> <li>Security: Storing keys directly in files or environment variables carries risks. Using the OS Keyring (<code>--keyring</code> flag in CLI <code>config set</code>) is the most secure option provided by the library, leveraging system-level secure storage.</li> </ul>"},{"location":"security/#trusted-execution-environments-tee","title":"Trusted Execution Environments (TEE)","text":"<ul> <li>Concept: TEEs offer hardware-level isolation to protect code and data during execution.</li> <li>AgentVault Support:<ul> <li>Agents can declare their use of a TEE in their Agent Card via the <code>capabilities.teeDetails</code> field.</li> <li>This field includes the TEE type (<code>type</code>) and optionally an <code>attestationEndpoint</code> URL and <code>publicKey</code>.</li> <li>The registry allows filtering agents based on TEE support (<code>has_tee</code>, <code>tee_type</code>).</li> </ul> </li> <li>Current Status: This is currently a declarative feature. AgentVault components do not yet enforce or verify TEE attestations automatically during A2A communication. Implementing client-side attestation verification and secure channel establishment based on TEE details is a significant future enhancement.</li> <li>Profile: See TEE Profile (placeholder link).</li> </ul>"},{"location":"security/#general-considerations","title":"General Considerations","text":"<ul> <li>Transport Security: Always use HTTPS for Registry API calls and A2A agent interactions unless strictly in a trusted local development environment. Agent Card URLs should enforce HTTPS.</li> <li>Input Validation: Both the Registry and Agent implementations rely heavily on Pydantic for validating incoming data against defined schemas.</li> <li>Rate Limiting: The Registry API implements basic rate limiting using <code>slowapi</code>. Agent implementations should consider adding their own rate limiting.</li> <li>Dependency Security: Use tools like <code>pip-audit</code> or Dependabot to monitor dependencies for known vulnerabilities.</li> </ul> <p>(This document will be updated as security features evolve.)</p>"},{"location":"developer_guide/library/","title":"Developer Guide: Client Library (<code>agentvault</code>)","text":"<p>The <code>agentvault</code> library is the core Python package for interacting with the AgentVault ecosystem from the client-side. It enables applications, scripts, or even other agents to discover A2A agents, manage credentials securely, and communicate using the A2A protocol.</p>"},{"location":"developer_guide/library/#key-components","title":"Key Components","text":""},{"location":"developer_guide/library/#agentvaultclient","title":"<code>AgentVaultClient</code>","text":"<p>The primary class for making A2A calls to remote agents.</p> <ul> <li>Purpose: Handles the underlying HTTP requests (POST for JSON-RPC methods, streaming GET/POST for SSE), authentication header injection, and response/event parsing.</li> <li>Protocol: Implements the AgentVault A2A Profile (based on JSON-RPC 2.0 over HTTP POST, Server-Sent Events for streaming). See A2A Profile v0.2.</li> <li>Usage: Designed to be used as an async context manager (<code>async with AgentVaultClient() as client:</code>).</li> <li>Authentication: Relies on an instance of <code>KeyManager</code> passed to its methods to retrieve necessary credentials (API Keys or OAuth tokens) based on the target agent's <code>AgentCard</code>.</li> <li>Main Methods:<ul> <li><code>async initiate_task(agent_card, initial_message, key_manager, mcp_context=None, webhook_url=None) -&gt; str</code>: Starts a new task or sends the first message to an existing one. Returns the <code>task_id</code>. Optionally includes MCP context or a webhook URL for push notifications.</li> <li><code>async send_message(agent_card, task_id, message, key_manager, mcp_context=None) -&gt; bool</code>: Sends a subsequent message to an ongoing task.</li> <li><code>async get_task_status(agent_card, task_id, key_manager) -&gt; Task</code>: Retrieves the current state, messages, and artifacts for a task.</li> <li><code>async terminate_task(agent_card, task_id, key_manager) -&gt; bool</code>: Requests cancellation of an ongoing task.</li> <li><code>async receive_messages(agent_card, task_id, key_manager) -&gt; AsyncGenerator[A2AEvent, None]</code>: Subscribes to Server-Sent Events for a task, yielding <code>A2AEvent</code> objects (like <code>TaskStatusUpdateEvent</code>, <code>TaskMessageEvent</code>) as they arrive.</li> </ul> </li> </ul>"},{"location":"developer_guide/library/#keymanager","title":"<code>KeyManager</code>","text":"<p>Handles secure loading, storage, and retrieval of credentials needed for agent authentication.</p> <ul> <li>Purpose: Abstracts away the source of credentials, allowing users/applications to configure keys via environment variables, files, or the OS keyring without changing the client code using the <code>KeyManager</code>.</li> <li>Priority: File &gt; Environment Variables &gt; OS Keyring (Keyring is only checked if enabled and needed).</li> <li>Sources &amp; Conventions:<ul> <li>Environment Variables:<ul> <li>API Key: <code>AGENTVAULT_KEY_&lt;SERVICE_ID_UPPER&gt;</code></li> <li>OAuth Client ID: <code>AGENTVAULT_OAUTH_&lt;SERVICE_ID_UPPER&gt;_CLIENT_ID</code></li> <li>OAuth Client Secret: <code>AGENTVAULT_OAUTH_&lt;SERVICE_ID_UPPER&gt;_CLIENT_SECRET</code></li> </ul> </li> <li>File (<code>.env</code> format):<ul> <li>API Key: <code>&lt;service_id_lower&gt;=...</code></li> <li>OAuth Client ID: <code>AGENTVAULT_OAUTH_&lt;service_id_lower&gt;_CLIENT_ID=...</code></li> <li>OAuth Client Secret: <code>AGENTVAULT_OAUTH_&lt;service_id_lower&gt;_CLIENT_SECRET=...</code></li> </ul> </li> <li>File (<code>.json</code> format): <pre><code>{\n  \"service_id_lower\": \"api_key_value\",\n  \"another_service\": {\n    \"apiKey\": \"...\",\n    \"oauth\": {\n      \"clientId\": \"...\",\n      \"clientSecret\": \"...\"\n    }\n  }\n}\n</code></pre></li> <li>OS Keyring (requires <code>pip install agentvault[os_keyring]</code>):<ul> <li>API Key: Service=<code>agentvault:&lt;norm_id&gt;</code>, Username=<code>&lt;norm_id&gt;</code></li> <li>OAuth Client ID: Service=<code>agentvault:oauth:&lt;norm_id&gt;</code>, Username=<code>clientId</code></li> <li>OAuth Client Secret: Service=<code>agentvault:oauth:&lt;norm_id&gt;</code>, Username=<code>clientSecret</code></li> </ul> </li> </ul> </li> <li>Key Methods:<ul> <li><code>__init__(key_file_path=None, use_env_vars=True, use_keyring=False, ...)</code>: Initializes and loads from file/env.</li> <li><code>get_key(service_id: str) -&gt; Optional[str]</code>: Retrieves API key.</li> <li><code>get_oauth_client_id(service_id: str) -&gt; Optional[str]</code>: Retrieves OAuth Client ID.</li> <li><code>get_oauth_client_secret(service_id: str) -&gt; Optional[str]</code>: Retrieves OAuth Client Secret.</li> <li><code>get_key_source(service_id: str) -&gt; Optional[str]</code>: Returns where the API key was loaded from ('env', 'file', 'keyring').</li> <li><code>get_oauth_config_status(service_id: str) -&gt; str</code>: Returns status like \"Configured (Source: KEYRING)\".</li> <li><code>set_key_in_keyring(service_id: str, key_value: str)</code>: Stores API key securely.</li> <li><code>set_oauth_creds_in_keyring(service_id: str, client_id: str, client_secret: str)</code>: Stores OAuth credentials securely.</li> </ul> </li> </ul>"},{"location":"developer_guide/library/#models-agentvaultmodels","title":"Models (<code>agentvault.models</code>)","text":"<p>Pydantic models defining the data structures used throughout the library.</p> <ul> <li>Agent Card Models: <code>AgentCard</code>, <code>AgentProvider</code>, <code>AgentCapabilities</code>, <code>AgentAuthentication</code>, <code>AgentSkill</code>, <code>TeeDetails</code>. These define the structure of <code>agent-card.json</code>.</li> <li>A2A Protocol Models: <code>Message</code>, <code>Part</code> (Union of <code>TextPart</code>, <code>FilePart</code>, <code>DataPart</code>), <code>Artifact</code>, <code>Task</code>, <code>TaskState</code> (Enum), <code>A2AEvent</code> (Union type for SSE), <code>TaskStatusUpdateEvent</code>, <code>TaskMessageEvent</code>, <code>TaskArtifactUpdateEvent</code>, and various request/response parameter/result models (<code>TaskSendParams</code>, <code>TaskSendResult</code>, etc.).</li> </ul>"},{"location":"developer_guide/library/#exceptions-agentvaultexceptions","title":"Exceptions (<code>agentvault.exceptions</code>)","text":"<p>Custom exception hierarchy for handling errors specific to the library.</p> <ul> <li><code>AgentVaultError</code> (Base exception)</li> <li><code>AgentCardError</code>: Base for card-related errors.<ul> <li><code>AgentCardValidationError</code>: Pydantic validation failed.</li> <li><code>AgentCardFetchError</code>: Network/HTTP error fetching card.</li> </ul> </li> <li><code>A2AError</code>: Base for A2A protocol errors.<ul> <li><code>A2AConnectionError</code>: Network issues connecting to agent.</li> <li><code>A2AAuthenticationError</code>: Authentication failed (missing key, invalid key/token, OAuth flow error).</li> <li><code>A2ARemoteAgentError</code>: Agent returned a JSON-RPC error or non-2xx HTTP status.</li> <li><code>A2ATimeoutError</code>: Operation timed out.</li> <li><code>A2AMessageError</code>: Invalid message format, unexpected response structure, JSON parsing error.</li> </ul> </li> <li><code>KeyManagementError</code>: Errors related to loading or storing credentials via <code>KeyManager</code>.</li> </ul>"},{"location":"developer_guide/library/#utilities","title":"Utilities","text":"<ul> <li><code>agentvault.agent_card_utils</code>:<ul> <li><code>parse_agent_card_from_dict(data: dict) -&gt; AgentCard</code>: Parses and validates data.</li> <li><code>load_agent_card_from_file(file_path: Path) -&gt; AgentCard</code>: Loads and validates from JSON file.</li> <li><code>async fetch_agent_card_from_url(url: str) -&gt; AgentCard</code>: Fetches and validates from URL.</li> </ul> </li> <li><code>agentvault.mcp_utils</code>:<ul> <li><code>get_mcp_context(message: Message) -&gt; Optional[Dict]</code>: Safely extracts MCP context from message metadata (client-side).</li> <li><code>format_mcp_context(context_data: Dict) -&gt; Optional[Dict]</code>: Validates and formats MCP context data for embedding (server-side/client-side).</li> </ul> </li> </ul>"},{"location":"developer_guide/registry/","title":"Developer Guide: Registry API (<code>agentvault_registry</code>)","text":"<p>The AgentVault Registry provides a central RESTful API service for discovering and managing Agent Cards. Developers interact with it to publish their agents, while clients (like the <code>agentvault_cli</code> or other applications) use it to find agents.</p>"},{"location":"developer_guide/registry/#api-base-path","title":"API Base Path","text":"<p>All registry API endpoints are prefixed with <code>/api/v1</code>. The full URL depends on where the registry is deployed (e.g., <code>http://localhost:8000/api/v1</code> for local development).</p>"},{"location":"developer_guide/registry/#authentication","title":"Authentication","text":"<p>Endpoints related to managing agent cards (creating, updating, deleting) require developer authentication. This is handled via an API key specific to the developer.</p> <ul> <li>Header: <code>X-Api-Key</code></li> <li>Value: The plain-text API key provided to the developer upon registration (or potentially through a future developer portal).</li> </ul> <p>Public endpoints (like listing/searching agents, getting details by ID, validating cards) do not require authentication, although some filtering options (like <code>owned_only</code>) might require it.</p>"},{"location":"developer_guide/registry/#common-error-responses","title":"Common Error Responses","text":"<ul> <li>401 Unauthorized: Invalid API Key provided.</li> <li>403 Forbidden: Valid API Key provided, but the developer does not have permission for the action (e.g., modifying another developer's card), or the <code>X-Api-Key</code> header was missing entirely for a protected endpoint.</li> <li>404 Not Found: The requested resource (e.g., Agent Card with a specific ID) does not exist.</li> <li>422 Unprocessable Entity: The request body failed validation (e.g., invalid Agent Card data during submission/update, missing required fields). The response <code>detail</code> usually contains specific validation error messages.</li> <li>500 Internal Server Error: An unexpected error occurred on the server.</li> </ul>"},{"location":"developer_guide/registry/#api-endpoints","title":"API Endpoints","text":""},{"location":"developer_guide/registry/#agent-cards-agent-cards","title":"Agent Cards (<code>/agent-cards</code>)","text":""},{"location":"developer_guide/registry/#post","title":"<code>POST /</code>","text":"<ul> <li>Purpose: Submit a new Agent Card to the registry.</li> <li>Authentication: Required (<code>X-Api-Key</code>).</li> <li>Request Body: <code>schemas.AgentCardCreate</code><ul> <li><code>card_data</code> (dict): The complete Agent Card JSON object. This data is validated against the canonical <code>agentvault.models.AgentCard</code> schema before storage.</li> </ul> </li> <li>Success Response (201 Created): <code>schemas.AgentCardRead</code> - Returns the full details of the newly created card record, including its generated UUID (<code>id</code>) and timestamps.</li> <li>Errors: 401, 403, 422 (if <code>card_data</code> is invalid), 500.</li> </ul>"},{"location":"developer_guide/registry/#get","title":"<code>GET /</code>","text":"<ul> <li>Purpose: List and search for registered Agent Cards.</li> <li>Authentication: Optional. Required only if <code>owned_only=true</code>.</li> <li>Query Parameters:<ul> <li><code>skip</code> (int, default: 0): Offset for pagination.</li> <li><code>limit</code> (int, default: 100, max: 250): Max items per page.</li> <li><code>active_only</code> (bool, default: true): Filter for active cards.</li> <li><code>search</code> (str, optional): Case-insensitive search term applied to <code>name</code> and <code>description</code>.</li> <li><code>tags</code> (list[str], optional): Filter by tags. Returns cards containing all specified tags within their <code>card_data['tags']</code> list. (e.g., <code>?tags=weather&amp;tags=forecast</code>)</li> <li><code>owned_only</code> (bool, default: false): If <code>true</code>, returns only cards owned by the authenticated developer (requires <code>X-Api-Key</code>).</li> </ul> </li> <li>Success Response (200 OK): <code>schemas.AgentCardListResponse</code> - Contains a list of <code>AgentCardSummary</code> objects for the current page and <code>PaginationInfo</code>.</li> <li>Errors: 401 (if <code>owned_only=true</code> and auth fails), 500.</li> </ul>"},{"location":"developer_guide/registry/#get-card_id","title":"<code>GET /{card_id}</code>","text":"<ul> <li>Purpose: Retrieve the full details of a specific Agent Card.</li> <li>Authentication: Public.</li> <li>Path Parameter:<ul> <li><code>card_id</code> (UUID): The unique ID of the agent card.</li> </ul> </li> <li>Success Response (200 OK): <code>schemas.AgentCardRead</code> - Contains the full card record, including the <code>card_data</code> JSON object and the <code>developer_is_verified</code> status.</li> <li>Errors: 404 (if ID not found), 500.</li> </ul>"},{"location":"developer_guide/registry/#put-card_id","title":"<code>PUT /{card_id}</code>","text":"<ul> <li>Purpose: Update an existing Agent Card. Only the owner can update.</li> <li>Authentication: Required (<code>X-Api-Key</code>, must match card owner).</li> <li>Path Parameter:<ul> <li><code>card_id</code> (UUID): The unique ID of the agent card to update.</li> </ul> </li> <li>Request Body: <code>schemas.AgentCardUpdate</code><ul> <li><code>card_data</code> (Optional[dict]): The complete, new Agent Card JSON object. If provided, it replaces the existing <code>card_data</code> entirely after validation.</li> <li><code>is_active</code> (Optional[bool]): Set the active status of the card.</li> </ul> </li> <li>Success Response (200 OK): <code>schemas.AgentCardRead</code> - Returns the full details of the updated card record.</li> <li>Errors: 401, 403 (if not owner), 404, 422 (if <code>card_data</code> is invalid), 500.</li> </ul>"},{"location":"developer_guide/registry/#delete-card_id","title":"<code>DELETE /{card_id}</code>","text":"<ul> <li>Purpose: Deactivate (soft delete) an Agent Card. Only the owner can deactivate.</li> <li>Authentication: Required (<code>X-Api-Key</code>, must match card owner).</li> <li>Path Parameter:<ul> <li><code>card_id</code> (UUID): The unique ID of the agent card to deactivate.</li> </ul> </li> <li>Success Response: <code>204 No Content</code>.</li> <li>Errors: 401, 403 (if not owner), 404, 500.</li> </ul>"},{"location":"developer_guide/registry/#utilities-utils","title":"Utilities (<code>/utils</code>)","text":""},{"location":"developer_guide/registry/#post-validate-card","title":"<code>POST /validate-card</code>","text":"<ul> <li>Purpose: Validate Agent Card data against the official schema without registering it.</li> <li>Authentication: Public.</li> <li>Request Body: <code>schemas.AgentCardValidationRequest</code><ul> <li><code>card_data</code> (dict): The Agent Card JSON object to validate.</li> </ul> </li> <li>Success Response (200 OK): <code>schemas.AgentCardValidationResponse</code><ul> <li><code>is_valid</code> (bool): True if the data conforms to the schema, False otherwise.</li> <li><code>detail</code> (Optional[str]): Contains validation error details if <code>is_valid</code> is False.</li> <li><code>validated_card_data</code> (Optional[dict]): The validated (and potentially normalized) card data if <code>is_valid</code> is True.</li> </ul> </li> <li>Errors: 422 (if the request body itself is invalid), 500.</li> </ul>"},{"location":"developer_guide/server_sdk/","title":"Developer Guide: Server SDK (<code>agentvault-server-sdk</code>)","text":"<p>The <code>agentvault-server-sdk</code> provides tools and abstractions to simplify the development of A2A-compliant agent servers in Python, particularly when using the FastAPI web framework.</p>"},{"location":"developer_guide/server_sdk/#key-components","title":"Key Components","text":""},{"location":"developer_guide/server_sdk/#basea2aagent","title":"<code>BaseA2AAgent</code>","text":"<ul> <li>Purpose: This is the abstract base class that your agent logic class should inherit from. It defines the core interface expected by the A2A protocol handlers.</li> <li>Implementation: You must implement the following asynchronous methods in your subclass:<ul> <li><code>handle_task_send(task_id: Optional[str], message: Message) -&gt; str</code>: Handles task initiation (<code>task_id</code> is <code>None</code>) or subsequent messages (<code>task_id</code> is provided). Should return the task ID.</li> <li><code>handle_task_get(task_id: str) -&gt; Task</code>: Retrieves the current state and details of a specific task.</li> <li><code>handle_task_cancel(task_id: str) -&gt; bool</code>: Attempts to cancel an ongoing task. Returns <code>True</code> if the request was accepted.</li> <li><code>handle_subscribe_request(task_id: str) -&gt; AsyncGenerator[A2AEvent, None]</code>: Returns an async generator that yields <code>A2AEvent</code> objects (status updates, messages, artifacts) for Server-Sent Event streaming.</li> </ul> </li> <li>Alternative: For simpler agents or specific method handling, you can use the <code>@a2a_method</code> decorator instead of implementing all <code>handle_...</code> methods (see below).</li> </ul>"},{"location":"developer_guide/server_sdk/#fastapi-integration-create_a2a_router","title":"FastAPI Integration (<code>create_a2a_router</code>)","text":"<ul> <li>Purpose: A helper function that takes an instance of your <code>BaseA2AAgent</code> subclass and returns a FastAPI <code>APIRouter</code>.</li> <li>Functionality:<ul> <li>Creates a single POST endpoint (typically mounted at <code>/a2a</code>).</li> <li>Handles incoming JSON-RPC 2.0 requests.</li> <li>Parses the request payload (<code>method</code>, <code>params</code>, <code>id</code>).</li> <li>Validates <code>params</code> against the expected Pydantic models defined in <code>agentvault.models</code> (e.g., <code>TaskSendParams</code>).</li> <li>Routes the request to the corresponding <code>handle_...</code> method or a decorated method on your agent instance.</li> <li>Handles the <code>tasks/sendSubscribe</code> method specifically, setting up an <code>SSEResponse</code> to stream events from your agent's <code>handle_subscribe_request</code> generator.</li> <li>Formats successful results and errors into standard JSON-RPC responses.</li> </ul> </li> <li>Usage: <pre><code>from fastapi import FastAPI\nfrom agentvault_server_sdk import create_a2a_router, BaseA2AAgent\n# Import your agent implementation\nfrom my_agent_module import MyAgent\n\napp = FastAPI()\nmy_agent_instance = MyAgent()\ntask_store = # ... initialize your task store (e.g., InMemoryTaskStore()) ...\n\n# Create the router, passing the agent and store\na2a_router = create_a2a_router(agent=my_agent_instance, task_store=task_store)\n\n# Include the router in your FastAPI app\napp.include_router(a2a_router, prefix=\"/a2a\")\n\n# IMPORTANT: Add required exception handlers to the main app\n# (See Exceptions section below and example server)\n</code></pre></li> <li>Exception Handling: The router relies on specific exception handlers being added to the main FastAPI <code>app</code> instance to correctly translate internal errors (like <code>TaskNotFoundError</code>, <code>ValueError</code>, <code>AgentServerError</code>) into appropriate JSON-RPC error responses. See the Basic A2A Server Example for required handlers.</li> </ul>"},{"location":"developer_guide/server_sdk/#a2a-method-decorator-a2a_method","title":"A2A Method Decorator (<code>@a2a_method</code>)","text":"<ul> <li>Purpose: Provides an alternative way to handle specific A2A methods without implementing the full suite of <code>handle_...</code> methods in <code>BaseA2AAgent</code>. Useful for agents that only support a subset of methods or custom methods.</li> <li>Usage: Decorate an <code>async def</code> method within your agent class.     <pre><code>from agentvault_server_sdk import BaseA2AAgent, a2a_method\nfrom pydantic import BaseModel\n\nclass EchoParams(BaseModel):\n    text_to_echo: str\n\nclass MyAgentWithDecorator(BaseA2AAgent):\n    # No need to implement handle_task_send, etc. if only using decorators\n\n    @a2a_method(\"custom/echo\")\n    async def echo_handler(self, text_to_echo: str) -&gt; str:\n        # Parameter 'text_to_echo' is automatically validated from params\n        return f\"You sent: {text_to_echo}\"\n\n    @a2a_method(\"tasks/get\") # Override specific standard methods\n    async def custom_get_handler(self, id: str) -&gt; Dict: # Return type validated\n         # Custom logic for getting task 'id'\n         return {\"id\": id, \"status\": \"custom_handled\"}\n</code></pre></li> <li>Features:<ul> <li>The router automatically discovers and routes calls to decorated methods based on the provided method name string.</li> <li>It automatically validates incoming <code>params</code> against the decorated function's type hints (using Pydantic).</li> <li>It automatically validates the return value against the function's return type hint.</li> </ul> </li> </ul>"},{"location":"developer_guide/server_sdk/#task-state-management-statepy","title":"Task State Management (<code>state.py</code>)","text":"<ul> <li>Purpose: Provides abstractions and a basic implementation for managing the state of ongoing A2A tasks, essential for handling <code>tasks/get</code>, <code>tasks/cancel</code>, and SSE notifications.</li> <li>Components:<ul> <li><code>TaskContext</code>: A simple dataclass holding basic task info (<code>task_id</code>, <code>current_state</code>, timestamps). Can be subclassed to store more agent-specific state.</li> <li><code>BaseTaskStore</code>: An abstract base class defining the interface for task storage (<code>get_task</code>, <code>create_task</code>, <code>update_task_state</code>, <code>delete_task</code>) and listener management (<code>add_listener</code>, <code>remove_listener</code>, <code>get_listeners</code>, <code>notify_...</code>).</li> <li><code>InMemoryTaskStore</code>: A basic, non-persistent implementation of <code>BaseTaskStore</code> using Python dictionaries. Suitable for development and simple agents.</li> </ul> </li> <li>Integration: The <code>create_a2a_router</code> accepts a <code>task_store</code> instance. If provided, the router uses it for:<ul> <li>Checking task existence before calling <code>handle_task_get</code>, <code>handle_task_cancel</code>, <code>handle_subscribe_request</code>.</li> <li>The agent implementation should also use the same <code>task_store</code> instance to update state (<code>update_task_state</code>) and trigger notifications (<code>notify_status_update</code>, <code>notify_message_event</code>, <code>notify_artifact_event</code>). The SDK's notification methods automatically handle fanning out events to subscribed SSE listeners.</li> </ul> </li> </ul>"},{"location":"developer_guide/server_sdk/#exceptions-exceptionspy","title":"Exceptions (<code>exceptions.py</code>)","text":"<p>Defines custom exceptions specific to server-side agent errors:</p> <ul> <li><code>AgentServerError</code> (Base exception)</li> <li><code>TaskNotFoundError</code>: Raised when an operation targets a non-existent task ID. Handled by the router to return a specific JSON-RPC error.</li> <li><code>InvalidStateTransitionError</code>: (Conceptual) Can be used by agent logic to signal invalid state changes.</li> <li><code>AgentProcessingError</code>: Generic error during agent's internal processing.</li> <li><code>ConfigurationError</code>: Agent configuration issue.</li> </ul>"},{"location":"developer_guide/server_sdk/#mcp-utilities-mcp_utilspy","title":"MCP Utilities (<code>mcp_utils.py</code>)","text":"<ul> <li>Purpose: Provides server-side utilities for handling Model Context Protocol data.</li> <li>Key Functions:<ul> <li><code>get_mcp_context(message: Message) -&gt; Optional[Dict]</code>: Safely extracts the <code>mcp_context</code> dictionary potentially embedded within an incoming A2A <code>Message</code>'s metadata.</li> </ul> </li> </ul>"},{"location":"developer_guide/server_sdk/#packager-cli-agentvault-sdk","title":"Packager CLI (<code>agentvault-sdk</code>)","text":"<ul> <li>Purpose: A command-line tool to help package your SDK-based agent for deployment, typically using Docker.</li> <li>Command: <code>agentvault-sdk package [OPTIONS]</code></li> <li>Functionality: Generates a standardized multi-stage <code>Dockerfile</code>, a <code>.dockerignore</code> file, and copies necessary files (like <code>requirements.txt</code>, <code>agent-card.json</code>) into an output directory, preparing the agent for containerization.</li> <li>Documentation: (Link to dedicated Packager documentation - coming soon)</li> </ul>"},{"location":"developer_guide/testing/","title":"Developer Guide: Testing Utilities (<code>agentvault-testing-utils</code>)","text":"<p>The <code>agentvault-testing-utils</code> package provides shared mocks, fixtures, factories, and helper functions designed to facilitate the testing of AgentVault components like the core library, CLI, registry, and server SDK implementations.</p>"},{"location":"developer_guide/testing/#installation","title":"Installation","text":"<p>This package is intended for development use only. Install it as a development dependency within the component you are testing using Poetry:</p> <pre><code># From the component's directory (e.g., agentvault_library)\npoetry add --group dev agentvault-testing-utils --path ../agentvault_testing_utils\n</code></pre> <p>Or ensure it's included in the main <code>poetry install --with dev</code> when run from the monorepo root.</p>"},{"location":"developer_guide/testing/#provided-utilities","title":"Provided Utilities","text":""},{"location":"developer_guide/testing/#mocks-mockagentvaultclient","title":"Mocks (<code>MockAgentVaultClient</code>)","text":"<ul> <li>Path: <code>agentvault_testing_utils.mocks.MockAgentVaultClient</code></li> <li>Purpose: A mock implementation of the core <code>agentvault.client.AgentVaultClient</code>. It allows you to simulate A2A interactions without making real network calls, configure return values or exceptions for client methods, and record calls made to the client for assertion purposes.</li> <li>Usage Example: <pre><code>import pytest\nfrom agentvault_testing_utils.mocks import MockAgentVaultClient\nfrom agentvault.models import Task, TaskState\nfrom agentvault.exceptions import A2AConnectionError\n\n@pytest.mark.asyncio\nasync def test_client_logic():\n    mock_client = MockAgentVaultClient()\n\n    # Configure return value for get_task_status\n    mock_task = Task(...) # Assume Task object is created or mocked\n    mock_client.get_task_status_return_value = mock_task\n\n    # Configure initiate_task to raise an error\n    mock_client.initiate_task_side_effect = A2AConnectionError(\"Mock connection failed\")\n\n    # --- Use the mock client in your test ---\n    # Example: Test error handling\n    with pytest.raises(A2AConnectionError):\n        await mock_client.initiate_task(...)\n\n    # Example: Test successful call\n    status = await mock_client.get_task_status(...)\n    assert status == mock_task\n\n    # Example: Assert calls were made\n    mock_client.call_recorder.get_task_status.assert_awaited_once()\n</code></pre></li> </ul>"},{"location":"developer_guide/testing/#mock-server-mock_a2a_server-fixture","title":"Mock Server (<code>mock_a2a_server</code> fixture)","text":"<ul> <li>Path: <code>agentvault_testing_utils.fixtures.mock_a2a_server</code></li> <li>Purpose: A pytest fixture that utilizes <code>respx</code> to set up mock HTTP endpoints simulating an A2A agent server and an OAuth token endpoint. It provides basic stateful handling for tasks and SSE events.</li> <li>Features:<ul> <li>Mocks <code>POST /a2a</code> endpoint, routing based on JSON-RPC <code>method</code>.</li> <li>Mocks <code>POST /token</code> endpoint for OAuth Client Credentials flow.</li> <li>Provides in-memory <code>task_store</code> (dict) and <code>sse_event_store</code> (dict) accessible via the fixture's return value, allowing tests to configure mock state and expected SSE events.</li> <li>Handles basic JSON-RPC request/response formatting and errors.</li> </ul> </li> <li>Usage Example: <pre><code>import httpx\nimport pytest\nfrom agentvault_testing_utils.fixtures import mock_a2a_server, MockServerInfo\nfrom agentvault.models import TaskState, TaskStatusUpdateEvent # Example event\n\n@pytest.mark.asyncio\nasync def test_api_interaction(mock_a2a_server: MockServerInfo):\n    # Configure mock state before making the call\n    task_id = \"test-task-123\"\n    mock_a2a_server.task_store[task_id] = {\"state\": TaskState.WORKING}\n    mock_a2a_server.sse_event_store[task_id] = [\n        TaskStatusUpdateEvent(...) # Create event instances\n    ]\n\n    # Make calls using httpx or AgentVaultClient to mock_a2a_server.base_url\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{mock_a2a_server.base_url}/a2a\",\n            json={\n                \"jsonrpc\": \"2.0\",\n                \"method\": \"tasks/get\",\n                \"params\": {\"id\": task_id},\n                \"id\": \"req-1\"\n            }\n        )\n        assert response.status_code == 200\n        assert response.json()[\"result\"][\"state\"] == \"WORKING\"\n\n    # Assertions on task_store or further interactions...\n</code></pre></li> </ul>"},{"location":"developer_guide/testing/#factories-create_test_agent_card","title":"Factories (<code>create_test_agent_card</code>)","text":"<ul> <li>Path: <code>agentvault_testing_utils.factories.create_test_agent_card</code></li> <li>Purpose: Creates <code>agentvault.models.AgentCard</code> Pydantic model instances with sensible default values, making it easy to generate valid test data. Allows overriding specific fields via keyword arguments.</li> <li>Usage Example: <pre><code>from agentvault_testing_utils.factories import create_test_agent_card\n\n# Default card\ncard1 = create_test_agent_card()\n\n# Card with specific overrides\ncard2 = create_test_agent_card(\n    name=\"Specific Test Agent\",\n    humanReadableId=\"my-org/specific-agent\",\n    authSchemes=[{\"scheme\": \"apiKey\", \"service_identifier\": \"specific-key\"}]\n)\n</code></pre></li> </ul>"},{"location":"developer_guide/testing/#test-agents-echoagent","title":"Test Agents (<code>EchoAgent</code>)","text":"<ul> <li>Path: <code>agentvault_testing_utils.agents.EchoAgent</code></li> <li>Purpose: A simple implementation of <code>agentvault_server_sdk.BaseA2AAgent</code> that performs basic actions like echoing the input message via SSE and setting task states. Useful for testing the Server SDK's router (<code>create_a2a_router</code>) and basic A2A flows without needing a complex agent implementation.</li> <li>Usage Example: See Server SDK Example.</li> </ul>"},{"location":"developer_guide/testing/#assertion-helpers-assertionspy","title":"Assertion Helpers (<code>assertions.py</code>)","text":"<ul> <li>Path: <code>agentvault_testing_utils.assertions</code></li> <li>Purpose: Provides helper functions to simplify assertions about A2A calls made during tests, whether using <code>respx</code> or <code>MockAgentVaultClient</code>.</li> <li>Key Functions:<ul> <li><code>assert_a2a_call(mock_calls, method, params_contain=None, req_id=None)</code>: Asserts that at least one call matching the criteria exists in the <code>mock_calls</code> (list of <code>httpx.Request</code> or <code>MagicMock.call_args_list</code>). <code>params_contain</code> performs a subset check on the call's parameters.</li> <li><code>assert_a2a_sequence(mock_calls, expected_sequence)</code>: Asserts that the sequence of parseable A2A calls matches the <code>expected_sequence</code> list of <code>(method, params_contain)</code> tuples.</li> </ul> </li> </ul>"},{"location":"user_guide/cli/","title":"User Guide: AgentVault CLI (<code>agentvault_cli</code>)","text":"<p>The <code>agentvault_cli</code> is your command-line tool for interacting with the AgentVault ecosystem. It allows you to manage credentials for accessing agents, discover agents registered in the central registry, and execute tasks on remote A2A-compliant agents.</p>"},{"location":"user_guide/cli/#installation","title":"Installation","text":"<p>(Link to main installation guide - coming soon)</p>"},{"location":"user_guide/cli/#core-commands","title":"Core Commands","text":"<p>The CLI is structured around several main commands:</p> <pre><code>agentvault_cli --help\n</code></pre> <p>This will show the main available command groups.</p>"},{"location":"user_guide/cli/#config","title":"<code>config</code>","text":"<p>Manage local API keys and OAuth credentials required to authenticate with different agents or services. Credentials can be stored securely in the OS keyring or referenced via environment variables or files.</p> <p>Usage:</p> <pre><code>agentvault_cli config --help\nagentvault_cli config set --help\nagentvault_cli config get --help\nagentvault_cli config list --help\n</code></pre> <p>Key Subcommands:</p> <ul> <li> <p><code>set &lt;service_id&gt; [OPTIONS]</code>: Configure how credentials for a specific service are sourced or stored.</p> <ul> <li><code>--env</code>: Provides guidance on setting API keys or OAuth credentials via environment variables (e.g., <code>AGENTVAULT_KEY_&lt;SERVICE_ID&gt;</code>, <code>AGENTVAULT_OAUTH_&lt;SERVICE_ID&gt;_CLIENT_ID</code>).</li> <li><code>--file &lt;path&gt;</code>: Provides guidance on setting credentials within a specified file (supports <code>.env</code> and <code>.json</code> formats).</li> <li><code>--keyring</code>: Prompts securely for an API key and stores it in the operating system's keyring associated with the <code>&lt;service_id&gt;</code>. This is the recommended method for storing keys directly via the CLI.</li> <li><code>--oauth-configure</code>: Prompts securely for an OAuth 2.0 Client ID and Client Secret and stores them in the OS keyring. Required for agents using the <code>oauth2</code> authentication scheme.</li> </ul> <p>Example (Store API Key securely): <pre><code>agentvault_cli config set my-openai-service --keyring\n# Prompts for key input\n</code></pre> Example (Configure OAuth): <pre><code>agentvault_cli config set my-google-agent --oauth-configure\n# Prompts for Client ID and Client Secret\n</code></pre></p> </li> <li> <p><code>get &lt;service_id&gt; [OPTIONS]</code>: Checks how credentials for a service are currently being sourced (Environment, File, Keyring).</p> <ul> <li><code>--show-key</code>: Displays the first few characters of the found API key (use with caution).</li> <li><code>--show-oauth-id</code>: Displays the configured OAuth Client ID if found.</li> </ul> <p>Example: <pre><code>agentvault_cli config get my-openai-service\nagentvault_cli config get my-google-agent --show-oauth-id\n</code></pre></p> </li> <li> <p><code>list</code>: Shows a summary of services for which credentials have been detected from environment variables or specified key files during initialization. Note: Does not actively scan the keyring.</p> </li> </ul>"},{"location":"user_guide/cli/#discover","title":"<code>discover</code>","text":"<p>Search for agents registered in the central AgentVault Registry.</p> <p>Usage:</p> <pre><code>agentvault_cli discover --help\nagentvault_cli discover [SEARCH_QUERY] [OPTIONS]\n</code></pre> <ul> <li><code>[SEARCH_QUERY]</code> (Optional): Text to search for in agent names or descriptions.</li> <li><code>--registry &lt;url&gt;</code>: Specify the URL of the AgentVault Registry (defaults to <code>http://localhost:8000</code> or <code>AGENTVAULT_REGISTRY_URL</code> env var).</li> <li><code>--limit &lt;n&gt;</code>: Maximum results per page (default: 25).</li> <li><code>--offset &lt;n&gt;</code>: Number of results to skip (for pagination).</li> </ul> <p>Example: <pre><code># List first 10 agents containing \"weather\"\nagentvault_cli discover weather --limit 10\n\n# List next page of weather agents\nagentvault_cli discover weather --limit 10 --offset 10\n</code></pre></p>"},{"location":"user_guide/cli/#run","title":"<code>run</code>","text":"<p>Execute a task on a specific remote agent using the A2A protocol.</p> <p>Usage:</p> <pre><code>agentvault_cli run --help\nagentvault_cli run --agent &lt;agent_ref&gt; --input &lt;input_data&gt; [OPTIONS]\n</code></pre> <ul> <li><code>--agent &lt;agent_ref&gt;</code> / <code>-a &lt;agent_ref&gt;</code> (Required): Identifies the target agent. Can be:<ul> <li>An Agent ID from the registry (e.g., <code>my-org/my-agent</code>).</li> <li>A direct URL to the agent's <code>agent-card.json</code>.</li> <li>A local file path to the agent's <code>agent-card.json</code>.</li> </ul> </li> <li><code>--input &lt;input_data&gt;</code> / <code>-i &lt;input_data&gt;</code> (Required): The input text for the agent. Prefix with <code>@</code> to read input from a file (e.g., <code>--input @prompt.txt</code>).</li> <li><code>--context-file &lt;path&gt;</code>: Path to a local JSON file containing MCP context data to send with the initial message.</li> <li><code>--registry &lt;url&gt;</code>: Registry URL (used if <code>&lt;agent_ref&gt;</code> is an ID).</li> <li><code>--key-service &lt;service_id&gt;</code>: Override the service ID used for looking up authentication credentials (useful if the Agent Card is ambiguous or missing a <code>service_identifier</code>).</li> <li><code>--auth-key &lt;key&gt;</code>: Directly provide the API key (INSECURE, for testing only). Overrides <code>KeyManager</code> lookup for <code>apiKey</code> schemes.</li> <li><code>--output-artifacts &lt;directory&gt;</code>: If provided, artifact content larger than 1KB received via SSE will be saved to files in this directory instead of being printed to the console.</li> </ul> <p>Example: <pre><code># Run task on agent by ID with text input\nagentvault_cli run --agent examples/simple-agent --input \"Explain A2A.\"\n\n# Run task using agent card URL and input from file, saving large artifacts\nagentvault_cli run -a http://localhost:8000/agent-card.json -i @my_prompt.txt --output-artifacts ./task_outputs\n</code></pre></p> <p>The <code>run</code> command streams events (status changes, messages, artifacts) from the agent in real-time using Server-Sent Events (SSE).</p>"},{"location":"user_guide/cli/#usage-tips","title":"Usage Tips","text":""},{"location":"user_guide/cli/#re-running-run-commands","title":"Re-running <code>run</code> Commands","text":"<p>The <code>agentvault_cli run</code> command can sometimes involve long agent identifiers or input strings. To easily recall and reuse previous commands:</p> <ul> <li>Shell History Search (Ctrl+R): Most shells allow you to search your command history interactively. Press <code>Ctrl+R</code> and start typing parts of the command you want to find (e.g., <code>run</code>, the agent ID, part of the input).</li> <li><code>history</code> Command: Use <code>history | grep agentvault_cli run</code> (or similar filter) to list previous run commands. You can then execute a specific command number (e.g., <code>!123</code>).</li> <li><code>fzf</code> (Fuzzy Finder): If you have <code>fzf</code> installed, you can pipe your history to it for interactive fuzzy searching: <code>history | fzf</code>. Select the desired command and press Enter to execute it. This is very powerful for quickly finding complex commands.</li> </ul>"},{"location":"user_guide/cli/#interactive-agent-selection-discover-fzf","title":"Interactive Agent Selection (<code>discover</code> + <code>fzf</code>)","text":"<p>If you have command-line tools like <code>fzf</code> (fuzzy finder) and <code>awk</code> installed, you can create powerful interactive workflows. For example, to discover agents, select one interactively, and then immediately run a task on it:</p> <pre><code># Example: Discover agents matching \"weather\", select one, run with input\nagentvault_cli discover weather | fzf --height 40% --border --header \"Select Agent:\" | awk '{print $1}' | xargs -I {} agentvault_cli run --agent {} --input \"What is the forecast for London?\"\n</code></pre> <p>Explanation:</p> <ol> <li><code>agentvault_cli discover weather</code>: Lists agents matching \"weather\".</li> <li><code>| fzf ...</code>: Pipes the list to <code>fzf</code> for interactive selection.</li> <li><code>| awk '{print $1}'</code>: Extracts the first column (the Agent ID) from the line selected in <code>fzf</code>. Note: You might need to adjust <code>$1</code> if the ID is in a different column based on your terminal width or <code>discover</code> output format.</li> <li><code>| xargs -I {} ...</code>: Takes the extracted ID (<code>{}</code>) and inserts it into the <code>agentvault_cli run</code> command.</li> </ol> <p>This allows you to quickly find and use agents without manually copying and pasting IDs.</p>"}]}