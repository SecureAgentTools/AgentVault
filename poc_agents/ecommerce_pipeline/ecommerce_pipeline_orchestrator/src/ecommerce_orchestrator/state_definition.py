import logging
from typing import TypedDict, List, Optional, Dict, Any

# Import the specific data models
from .models import UserProfile, ProductDetail, TrendingData, ProductRecommendation
# Import config and wrapper types for state typing
from .config import EcommercePipelineConfig
from .a2a_client_wrapper import A2AClientWrapper


logger = logging.getLogger(__name__)

# Define the structure for the state that will be passed around the graph.
class RecommendationState(TypedDict):
    """
    Represents the overall state of the e-commerce recommendation pipeline graph.
    Includes configuration and A2A wrapper instance.
    """
    # Initial inputs & Configuration
    user_id: str
    request_context: Optional[Dict[str, Any]] # e.g., {"current_product_id": "xyz", "search_query": "abc"}
    pipeline_config: EcommercePipelineConfig # Holds the validated pipeline config
    a2a_wrapper: A2AClientWrapper # Holds the initialized A2A wrapper instance

    # Tracking & Error Handling
    project_id: str # Unique ID for this pipeline run
    current_step: Optional[str] # Name of the last executed node
    error_message: Optional[str] # Stores error messages if a step fails

    # Intermediate results (content loaded from artifacts)
    user_profile: Optional[UserProfile]
    product_details: Optional[List[ProductDetail]] # Contextual products
    trending_data: Optional[TrendingData]

    # Final result
    recommendations: Optional[List[ProductRecommendation]]

    # Store local file paths to artifacts generated by nodes
    local_artifact_references: Dict[str, str] # Maps artifact type (e.g., "user_profile_data") to absolute local file path

logger.info("RecommendationState TypedDict defined in state_definition.py.")
