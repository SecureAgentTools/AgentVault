import logging
from typing import TypedDict, List, Optional, Dict, Any

# Import the specific data models defined for this pipeline
from .models import DynamicsDataPayload, ExternalDataPayload, AccountAnalysisPayload, RecommendedAction

# Import config and wrapper types for state typing
try:
    from dynamics_orchestrator.config import DynamicsPipelineConfig
    class A2AClientWrapper: pass # Placeholder
except ImportError:
    class DynamicsPipelineConfig: pass # type: ignore
    class A2AClientWrapper: pass # type: ignore

logger = logging.getLogger(__name__)

# REQ-DYN-ORCH-003
class AccountProcessingState(TypedDict):
    """State for the Dynamics Account Processing pipeline."""
    # Inputs & Config
    account_id: str
    pipeline_config: DynamicsPipelineConfig
    a2a_wrapper: A2AClientWrapper
    project_id: str

    # Tracking
    current_step: Optional[str]
    error_message: Optional[str]

    # Agent Results (stored directly, not artifact IDs)
    dynamics_data: Optional[DynamicsDataPayload]
    external_data: Optional[ExternalDataPayload]
    account_analysis: Optional[AccountAnalysisPayload]
    recommended_actions: Optional[List[RecommendedAction]] # Generated by recommender
    account_briefing: Optional[str] # Final output

    # --- ADDED: Store results from execution node ---
    action_execution_results: Optional[Dict[str, List[Dict[str, Any]]]] # Stores results like {'task_creation': [...], 'slack': [...]}
    # --- END ADDED ---

logger.info("AccountProcessingState TypedDict defined.")
