import logging
from typing import TypedDict, List, Optional, Dict, Any

# Import the specific data models defined for this pipeline
from .models import TicketAnalysis, KnowledgeBaseArticle, CustomerHistorySummary

# Import config and wrapper types for state typing (use absolute path if needed)
# Assuming A2AClientWrapper will be copied/adapted from e-commerce example later
try:
    from support_orchestrator.config import SupportPipelineConfig
    # Placeholder for A2AClientWrapper - will be defined/copied later
    class A2AClientWrapper: pass
except ImportError:
    # Fallback if run before config is fully set up
    class SupportPipelineConfig: pass # type: ignore
    class A2AClientWrapper: pass # type: ignore


logger = logging.getLogger(__name__)

# Define the structure for the state that will be passed around the graph.
# REQ-SUP-ORCH-003
class TicketProcessingState(TypedDict):
    """
    Represents the overall state of the support ticket processing pipeline graph.
    Includes configuration and A2A wrapper instance.
    """
    # --- Initial inputs & Configuration ---
    ticket_text: str                   # The raw text of the customer support ticket
    customer_identifier: str           # Unique ID or email of the customer
    pipeline_config: SupportPipelineConfig # Holds the validated pipeline config
    a2a_wrapper: A2AClientWrapper      # Holds the initialized A2A wrapper instance

    # --- Tracking & Error Handling ---
    project_id: str                    # Unique ID for this pipeline run
    current_step: Optional[str]        # Name of the last executed node
    error_message: Optional[str]       # Stores error messages if a step fails

    # --- Intermediate results (content loaded from artifacts) ---
    ticket_analysis: Optional[TicketAnalysis]        # Result from Ticket Analyzer Agent
    kb_results: Optional[List[KnowledgeBaseArticle]] # Result from KB Search Agent
    customer_history: Optional[CustomerHistorySummary] # Result from Customer History Agent

    # --- Final result ---
    suggested_response: Optional[str]  # Result from Response Suggestion Agent

    # --- Artifact Management ---
    # Store local file paths to artifacts generated by nodes (REQ-SUP-ORCH-006)
    local_artifact_references: Dict[str, str] # Maps artifact type (e.g., "ticket_analysis") to absolute local file path

logger.info("TicketProcessingState TypedDict defined.")
