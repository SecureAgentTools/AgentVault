Based on your confirmation, here is the implementation plan specifically for the agreed-upon **Enhanced Security & Trust** items. This plan breaks down the suggestions into actionable steps and proposes new Requirement IDs (`REQ-`) where appropriate.

---

**Implementation Plan: Enhanced Security & Trust (Phase 1 Additions)**

**Overall Goal:** Integrate foundational security practices and enhance user trust by addressing dependency management, vulnerability disclosure, API protection, and user awareness.

**1. Dependency Security Management**

*   **REQ-SEC-DEP-001: Integrate Automated Dependency Scanning**
    *   **Component:** CI/CD (Affects all components indirectly)
    *   **Action:** Add a step to the project's CI/CD pipeline (e.g., GitHub Actions workflow) to scan dependencies for known vulnerabilities.
    *   **Implementation Details:**
        *   Choose a tool: `pip-audit` is a good, straightforward option. `Dependabot` (via GitHub settings) is also excellent for automated checks and PRs.
        *   Add a job/step in the CI workflow (e.g., `.github/workflows/ci.yml`) that runs `pip-audit` against the `poetry.lock` files of each component (`agentvault_library`, `agentvault_registry`, `agentvault_cli`).
        *   Configure the CI step to fail if high or critical severity vulnerabilities are found.
    *   **Tools:** `pip-audit`, CI/CD platform (e.g., GitHub Actions).

*   **REQ-SEC-DEP-002: Document Dependency Update Policy**
    *   **Component:** Documentation (Project Root)
    *   **Action:** Add a section to `CONTRIBUTING.md` (or create a dedicated `SECURITY_POLICY.md` if preferred) outlining the policy for handling vulnerable dependencies.
    *   **Implementation Details:**
        *   State the commitment to regularly scan dependencies (linking to REQ-SEC-DEP-001).
        *   Define the process for addressing found vulnerabilities (e.g., prioritize critical/high, attempt update, assess risk if no patch available, document exceptions).
        *   Clarify expectations for contributors regarding dependency updates in PRs.
    *   **Files:** `CONTRIBUTING.md` (or new `SECURITY_POLICY.md`)

**2. Vulnerability Disclosure Policy**

*   **REQ-SEC-DISC-001: Create SECURITY.md File**
    *   **Component:** Project Root
    *   **Action:** Create a `SECURITY.md` file in the root directory.
    *   **Implementation Details:**
        *   **Content:**
            *   **Introduction:** State the project's commitment to security.
            *   **Scope:** Define which components/repositories are covered by this policy.
            *   **Reporting:** Provide clear instructions on how to report a vulnerability *privately*. Options:
                *   Dedicated email address (e.g., `security@agentvault.example.com` - **replace domain**). State that this is for vulnerability reports *only*.
                *   Enable and link to GitHub's Private Vulnerability Reporting feature for the repository. (Recommended if using GitHub).
            *   **What to Include:** Request details like component, version, description, steps to reproduce, potential impact.
            *   **Response:** Set expectations for acknowledgment (e.g., within 48 hours) and updates.
            *   **Disclosure:** Briefly mention the plan for public disclosure after a fix is available (e.g., via release notes, security advisories).
            *   **Safe Harbor:** Include a statement that you will not take legal action against reporters who act in good faith and follow the policy.
    *   **Files:** `SECURITY.md`

**3. Registry API Protection**

*   **REQ-REG-SEC-001: Implement Rate Limiting**
    *   **Component:** `agentvault-registry`
    *   **Action:** Add rate limiting middleware to the FastAPI application.
    *   **Implementation Details:**
        *   Add `slowapi` to `agentvault_registry/pyproject.toml` dependencies.
        *   In `agentvault_registry/main.py`:
            *   Import necessary components from `slowapi` and `slowapi.errors`.
            *   Configure a default limiter (e.g., based on IP address using `Limiter(key_func=get_remote_address)`).
            *   Apply the limiter as middleware to the FastAPI app (`app.state.limiter = limiter`, `app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)`, `app.add_middleware(SlowAPIMiddleware)`).
            *   Consider applying stricter limits to authenticated endpoints (POST/PUT/DELETE on `/agent-cards`) potentially using a different key function (e.g., based on the authenticated developer ID) or route-specific decorators (`@limiter.limit(...)`). Public GET endpoints should have more lenient limits.
    *   **Files:** `agentvault_registry/pyproject.toml`, `agentvault_registry/src/agentvault_registry/main.py`
    *   **Dependencies:** `slowapi`

*   **REQ-REG-SEC-002: Enhance Query Parameter Validation**
    *   **Component:** `agentvault-registry`
    *   **Action:** Add stricter validation for API query parameters, especially free-text search.
    *   **Implementation Details:**
        *   In `agentvault_registry/routers/agent_cards.py`, modify the `list_agent_cards` endpoint signature.
        *   For the `search: Optional[str] = Query(...)` parameter, add a `max_length` constraint (e.g., `max_length=100`) to prevent overly long search terms potentially impacting database performance.
        *   Review `skip` and `limit` validation (already using `ge`, `le`) - ensure limits are reasonable.
    *   **Files:** `agentvault_registry/src/agentvault_registry/routers/agent_cards.py`

**4. Key Lookup Redesign (Deferred)**

*   **REQ-REG-SEC-KEYLOOKUP (Phase 2): Redesign Developer API Key Lookup**
    *   **Component:** `agentvault-registry`
    *   **Action:** Defer implementation to Phase 2.
    *   **Implementation Details (Future):** Replace the iterative hash verification in `crud.developer.get_developer_by_plain_api_key` with either the Key Prefix or Separate Key Table approach outlined previously. This will involve database schema changes (new column or table), migration updates, and modifications to `crud.developer` and `security.py`.

**5. User Warnings & Documentation**

*   **REQ-DOC-SEC-001: Enhance README Security Section**
    *   **Component:** Project Root (`README.md`)
    *   **Action:** Revise and expand the "Security Model" section in the main project `README.md`.
    *   **Implementation Details:**
        *   Make the section more prominent (e.g., use headings, bold text).
        *   Add a dedicated subsection titled "Trusting Remote Agents".
        *   Explicitly state that interacting with a remote agent involves trusting its operator.
        *   Reinforce that AgentVault *does not* vet agent behavior.
        *   Emphasize checking the Agent Card for provider info, privacy policies, etc.
        *   Reiterate advice on minimizing sensitive data sent to unknown agents.
*   **REQ-CLI-SEC-001: Add CLI Warning for New Agents (Optional - Phase 1.5)**
    *   **Component:** `agentvault-cli`
    *   **Action:** (Potentially defer slightly due to added state management complexity) Implement a mechanism in the `run` command to warn the user the first time they interact with a specific agent ID.
    *   **Implementation Details:**
        *   **State Storage:** Choose a simple method to store IDs of previously run agents (e.g., a plain text file in `~/.config/agentvault/known_agents.txt` or a small local SQLite DB).
        *   **Logic in `run` command:** Before initiating the task, load the known agent IDs. Check if the target `agent_ref` (specifically the ID part if resolved from registry/card) is in the known list.
        *   **Warning & Confirmation:** If the ID is *not* known:
            *   Display a clear warning message (using `utils.display_warning`) explaining the trust implications of running an unknown agent.
            *   Require explicit confirmation to proceed. This could be via:
                *   An interactive prompt (`click.confirm(...)`).
                *   A mandatory `--yes` or `--force-run-unknown` flag for non-interactive use.
            *   If confirmed, add the agent ID to the known list and proceed.
            *   If not confirmed, exit gracefully.
    *   **Files:** `agentvault_cli/src/agentvault_cli/commands/run.py`, potentially a new utility file for managing the known agents list.

---

---

**Implementation Plan: Responsible Project Practices (Phase 1 Documentation)**

**Overall Goal:** Establish foundational documents for ethical guidelines, community interaction, legal compliance, and registry governance to build trust and ensure responsible operation.

**1. Ethical Considerations & Registry Governance**

*   **REQ-ETHICS-REG-001: Create Registry Policy Document**
    *   **Component:** Documentation (Project Root)
    *   **Action:** Create a `REGISTRY_POLICY.md` file in the project root directory.
    *   **Implementation Details:**
        *   **Content:**
            *   **Purpose:** State the registry's goal (discovery) and explicitly state what it *does not* do (execute agents, handle keys, guarantee agent behavior).
            *   **Agent Card Submissions:** Briefly outline who can submit (authenticated developers).
            *   **Vetting Process:** Clearly define the level of vetting performed (e.g., "Automated checks for schema validity, basic endpoint reachability. No manual review or vetting of agent functionality, security, or ethical behavior is performed.").
            *   **Content Guidelines:** (Optional, but recommended) State prohibited content types for Agent Cards (e.g., illegal activities, hate speech, clearly deceptive descriptions).
            *   **Reporting Issues:** Define the process for users to report problematic or misleading Agent Cards (e.g., "Please report concerns about specific Agent Cards, including the Card ID and a description of the issue, to `registry-reports@agentvault.example.com` (replace domain).")
            *   **Enforcement:** Describe potential actions upon receiving valid reports (e.g., "We reserve the right to deactivate (soft delete) Agent Cards found to violate these guidelines or reported as malicious, at our discretion.").
            *   **Disclaimer:** Reiterate that users interact with third-party agents at their own risk.
    *   **Files:** `REGISTRY_POLICY.md`

**2. Community & Contribution**

*   **REQ-COMMUNITY-COC-001: Create Code of Conduct**
    *   **Component:** Documentation (Project Root)
    *   **Action:** Create a `CODE_OF_CONDUCT.md` file in the project root directory.
    *   **Implementation Details:**
        *   **Content:** Adopt a standard Code of Conduct. The [Contributor Covenant (v2.1)](https://www.contributor-covenant.org/version/2/1/code_of_conduct/) is a widely used and respected choice. Copy the standard text and fill in the project name (`AgentVault`) and the contact email address for reporting violations (this could be the main project contact or a dedicated address like `conduct@agentvault.example.com` - replace domain).
    *   **Files:** `CODE_OF_CONDUCT.md`

*   **REQ-COMMUNITY-CONTRIB-001: Enhance Contribution Guidelines**
    *   **Component:** Documentation (Project Root)
    *   **Action:** Update the existing `CONTRIBUTING.md`.
    *   **Implementation Details:**
        *   Add a reference/link to the new `CODE_OF_CONDUCT.md`.
        *   (Optional for Phase 1, but good later) Briefly mention the project's current governance model (e.g., "Currently maintained by the core contributors, decisions made via consensus on GitHub issues/PRs") and state that it may evolve.
    *   **Files:** `CONTRIBUTING.md`

**3. Legal & Compliance**

*   **REQ-LEGAL-LIC-DEPS-001: Document Dependency License Check (Internal/README)**
    *   **Component:** Documentation (Project Root / Internal)
    *   **Action:** Perform a review of licenses listed in the `poetry.lock` files for all three components. Document the process and findings.
    *   **Implementation Details:**
        *   **Process:** Use `pip-licenses --from=mixed --format=markdown --output-file=DEPENDENCY_LICENSES.md` (or similar tool/manual check) to list dependencies and their licenses for each component. Verify compatibility with the project's Apache 2.0 license.
        *   **Documentation:** Add a brief section to the main `README.md` under "License" stating that dependency licenses have been reviewed for compatibility. Keep the generated `DEPENDENCY_LICENSES.md` file for internal reference or add it to the repository (optional, can become outdated quickly).
    *   **Files:** (Potentially) `DEPENDENCY_LICENSES.md`, Update `README.md`.

*   **REQ-LEGAL-REG-TOS-001: Create Registry Terms of Service**
    *   **Component:** Documentation (Project Root or `agentvault_registry/`)
    *   **Action:** Create a `TERMS_OF_SERVICE.md` file (recommend placing in project root for visibility).
    *   **Implementation Details:**
        *   **Content (Draft - Consult Legal Advice):**
            *   **Introduction:** Define the service (AgentVault Registry API).
            *   **Acceptance:** User agrees by using the service.
            *   **Developer Accounts:** Requirements for creating/maintaining accounts (if applicable beyond just API key auth). Responsibility for key security.
            *   **Agent Card Submissions:** Developer responsibility for accuracy, compliance with `REGISTRY_POLICY.md`, granting license for registry to display the data.
            *   **Prohibited Use:** List forbidden activities (violating policy, illegal use, disrupting service).
            *   **Disclaimers:** **Crucially:** Disclaim warranty for the service itself (provide "as is") AND explicitly disclaim any responsibility or liability for third-party agents discovered via the registry. Emphasize user responsibility when interacting with agents.
            *   **Intellectual Property:** Clarify ownership of registry data vs. submitted Agent Card content vs. third-party agent services.
            *   **Termination:** Conditions under which developer access might be revoked or cards deactivated.
            *   **Limitation of Liability:** Standard clauses limiting liability.
            *   **Governing Law.**
            *   **Contact Information.**
    *   **Files:** `TERMS_OF_SERVICE.md`

*   **REQ-LEGAL-REG-PP-001: Create Registry Privacy Policy**
    *   **Component:** Documentation (Project Root or `agentvault_registry/`)
    *   **Action:** Create a `PRIVACY_POLICY.md` file (recommend placing in project root).
    *   **Implementation Details:**
        *   **Content (Draft - Consult Legal Advice):**
            *   **Introduction:** What the policy covers (Registry API).
            *   **Data Controller:** Identify the entity responsible (e.g., "The AgentVault Project Maintainers").
            *   **Information Collected:** Specify what data is collected from developers (e.g., Name, Hashed API Key, potentially Email if added later for account recovery/notifications) and from general users (e.g., standard web server logs - IP address, user agent, request details for security/analytics).
            *   **How Information is Used:** Explain the purpose (authentication, service operation, security, analytics, communication *if* email collected). State that API keys are only stored hashed.
            *   **Data Sharing:** State if/how data is shared (e.g., "We do not sell developer data. Aggregated, anonymized usage data may be used for analytics.").
            *   **Data Security:** Describe security measures taken (HTTPS, hashing keys, etc.).
            *   **Data Retention:** How long is data kept?
            *   **User Rights (GDPR):** Inform users (especially developers providing data) of their rights (access, rectification, erasure, etc.) and provide a contact method to exercise these rights (e.g., the `registry-reports` or a dedicated `privacy@` email).
            *   **Cookies:** (Likely not applicable for the API itself, but mention if any web frontend is added later).
            *   **Policy Updates:** How users will be notified of changes.
            *   **Contact Information.**
    *   **Files:** `PRIVACY_POLICY.md`

**4. Linking Documentation**

*   **REQ-DOC-LINK-001: Update Root README**
    *   **Component:** Documentation (Project Root)
    *   **Action:** Add links to the newly created policy/contribution files in the main `README.md`.
    *   **Implementation Details:** Add links under appropriate sections (e.g., link `SECURITY.md` near the Security Model, link `CONTRIBUTING.md` and `CODE_OF_CONDUCT.md` under a "Contributing" section, link `REGISTRY_POLICY.md`, `TERMS_OF_SERVICE.md`, `PRIVACY_POLICY.md` under a "Legal" or "Registry Information" section).
    *   **Files:** `README.md`

---